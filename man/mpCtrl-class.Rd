% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mpCtrl-class.R
\docType{class}
\name{mpCtrl-class}
\alias{mpCtrl-class}
\alias{mpCtrl}
\alias{initialize,mpCtrl-method}
\alias{mpCtrl-methods}
\alias{est}
\alias{est-methods}
\alias{est,mpCtrl-method}
\alias{est<-}
\alias{est<--methods}
\alias{est<-,mpCtrl,function-method}
\alias{phcr}
\alias{phcr-methods}
\alias{phcr,mpCtrl-method}
\alias{phcr<-}
\alias{phcr<--methods}
\alias{phcr<-,mpCtrl,function-method}
\alias{hcr}
\alias{hcr-methods}
\alias{hcr,mpCtrl-method}
\alias{hcr<-}
\alias{hcr<--methods}
\alias{hcr<-,mpCtrl,function-method}
\alias{isys}
\alias{isys-methods}
\alias{isys,mpCtrl-method}
\alias{isys<-}
\alias{isys<--methods}
\alias{isys<-,mpCtrl,function-method}
\alias{tm}
\alias{tm-methods}
\alias{tm,mpCtrl-method}
\alias{tm<-}
\alias{tm<--methods}
\alias{tm<-,mpCtrl,function-method}
\alias{show,mpCtrl-method}
\alias{iters,mpCtrl-method}
\alias{iter,mpCtrl-method}
\alias{method,mpCtrl-method}
\alias{method<-,mpCtrl,function-method}
\alias{method<-,mpCtrl-method}
\alias{args<-,mpCtrl,function-method}
\alias{args<-,mpCtrl-method}
\alias{debug,mpCtrl,character-method}
\title{S4 class \code{mpCtrl}}
\usage{
\S4method{initialize}{mpCtrl}(.Object, ...)

est(object, ...)

\S4method{est}{mpCtrl}(object)

est(object) <- value

\S4method{est}{mpCtrl,`function`}(object) <- value

phcr(object, ...)

\S4method{phcr}{mpCtrl}(object)

phcr(object) <- value

\S4method{phcr}{mpCtrl,`function`}(object) <- value

hcr(object, ...)

\S4method{hcr}{mpCtrl}(object)

hcr(object) <- value

\S4method{hcr}{mpCtrl,`function`}(object) <- value

isys(object, ...)

\S4method{isys}{mpCtrl}(object)

isys(object) <- value

\S4method{isys}{mpCtrl,`function`}(object) <- value

tm(object, ...)

\S4method{tm}{mpCtrl}(object)

tm(object) <- value

\S4method{tm}{mpCtrl,`function`}(object) <- value

\S4method{show}{mpCtrl}(object)

\S4method{iters}{mpCtrl}(object, iter)

\S4method{iter}{mpCtrl}(obj, iter)

\S4method{method}{mpCtrl}(object, element)

\S4method{method}{mpCtrl,`function`}(object, element) <- value

\S4method{args}{mpCtrl,`function`}(object, element) <- value

\S4method{debug}{mpCtrl,character}(fun, text)
}
\arguments{
\item{...}{additional argument list that might never be used}

\item{object}{object of relevant class (see signature of method)}
}
\description{
The \code{mpCtrl} class defines which modules will be run my a
call to the \code{mp} function. It contains a series of objects of class \emph{mseCtrl}
only for those modules required by the defined MP.
}
\section{Slots}{

\describe{
\item{\code{est}}{Specification for the stock status estimator, class \emph{mseCtrl}.}

\item{\code{phcr}}{Specification for the harvest control rule parametrization, class \emph{mseCtrl}.}

\item{\code{hcr}}{Specification for the harvest control rule, class \emph{mseCtrl}.}

\item{\code{isys}}{Specification for the implementation system, class \emph{mseCtrl}.}

\item{\code{tm}}{Specification for technical measures, class \emph{mseCtrl}.}
}}

\section{Accessors}{

All slots in the class have accessor and replacement methods defined that
allow retrieving and substituting individual slots.

The values passed for replacement need to be of the class of that slot.
A numeric vector can also be used when replacing FLQuant slots, and the
vector will be used to substitute the values in the slot, but not its other
attributes.
}

\section{Constructor}{

A construction method exists for this class that can take named arguments for
any of its slots. All slots are then created to match the requirements of the
class validity. If an unnamed \code{FLQuant} object is provided, this is used
for sizing, but not for populating any slot.
}

