source('example.R', echo=TRUE)
q()
library(FLa4a)
library(ggplotFL)
library(mse)
# LOAD data
data(ple4)
data(ple4.indices)
stk <- ple4
idx <- ple4.indices["BTS-Combined (all)"]
# VARIABLES
it <- 2 # iterations
fy <- 2030 # final year
y0 <- range(stk)["minyear"] # initial OM year
dy <- range(stk)["maxyear"] # final OM year
iy <- dy # initial year of projection (also intermediate)
#ny <- fy - iy + 1 # number of years to project from initial year
nsqy <- 3 # number of years to compute status quo metrics
vy <- ac(iy:fy) # vector of years to be projected
mpargs <- list(fy=fy, y0=y0, iy=iy, nsqy=nsqy)
# ==============================================================================
# OM conditioning
# ==============================================================================
# - Two SRRs: geomean and Bevholt
mcsave <- 500
mcmc <- mcsave*it
fit <- sca(stk, idx, fit="MCMC", mcmc = SCAMCMC(mcmc = mcmc, mcsave = mcsave, mcprobe = 0.4))
stk <- stk + fit
# skin to keep one iteration
stk0 <- qapply(stk, iterMedians)
# Fit a4a model to replicate official assessment w/MCMC
# average recruitment estimation sd
rv1 <- sqrt(mean(c(iterVars(log(rec(stk)))), na.rm=TRUE))
# average autocor lag1
# TODO acf(residuals)
ac1 <- mean(apply(window(rec(stk), end=2008)@.Data, 6, function(x)
  c(acf(c(x), plot=FALSE, lag.max=1)$acf[2])))
# BevHolt
srbh <- fmle(as.FLSR(stk0, model="bevholt"), method="L-BFGS-B", lower=c(1e-6, 1e-6), upper=c(max(rec(stk)) * 3, Inf))
# Residuals
resbh <- ar1rlnorm(rho=ac1, years=dy:fy, iters=it, margSD=rv1*2)
residuals(srbh) <- resbh
# ==============================================================================
# Refpts
# ==============================================================================
brp <- brp(FLBRP(stk0, srbh))
# ==============================================================================
# Set up operating model
# ==============================================================================
# Set up future assumptions - means of 3 years
stk <- fwdWindow(stk, brp, end=2030)
#==============================================================================
# Fleet behaviour
#==============================================================================
fb <- mseCtrl(method=hyperstability.fb, args=list(beta=0.8))
#==============================================================================
# OM object
#==============================================================================
om <- FLom(stock=stk, sr=srbh, refpts=refpts(brp))#, fleetBehaviour=fb)
###############################################################################
# OEM settings
###############################################################################
#==============================================================================
# prepare objects
#==============================================================================
stk <- stock(om)
#==============================================================================
# Estimate the indices catchability from the a4a fit (without simulation)
#==============================================================================
set.seed(0)
# Use all indices
idcs <- FLIndices()
for (i in 1:length(idx)){
# this is a simplification as if index reflects 01 January abundances
lst <- mcf(list(idx[[i]]@index, stock.n(stk0)))
# log catchability of index 
idx.lq <- log(lst[[1]]/lst[[2]]) 
# empty quant
idx.qmu <- idx.qsig <- stock.n(iter(stk,1)) 
# Every year has the same mean catchability
idx.qmu[] <- yearMeans(idx.lq) 
idx.qsig[] <- sqrt(yearVars(idx.lq))
idx.q <- FLQuant(NA, dimnames=dimnames(stock.n(stk)))
# Build FLQ of index catchability based on lognormal distribution with mean and sd calculated above
idx.q <- rlnorm(it, idx.qmu, idx.qsig) 
#idx.q[,ac(y0:iy)] <- idx.q[,ac(y0:iy)]
idx_temp <- idx.q * stock.n(stk)
# generate initial index
idx_temp <- FLIndex(index=idx_temp, index.q=idx.q) 
range(idx_temp)[c("startf", "endf")] <- c(0, 0)
idcs[[i]] <- idx_temp
}
names(idcs) <- names(idx)
#==============================================================================
# Deviances for catch.n
#==============================================================================
set.seed(0)
catch.dev <- log(catch.n(stk))
catch.dev <- catch.dev-iterMeans(catch.dev)
Sig <- apply(catch.dev[,ac(y0:dy),1,1,,drop=TRUE], 3, function(x) cov(t(x)))
Sig <- apply(Sig, 1, mean)
Sig <- matrix(Sig, ncol=dim(catch.dev)[1])
catch.dev[,ac(vy)][] <- t(mvrnorm(it * length(vy), rep(0, nrow(Sig)), Sig))
catch.dev <- exp(catch.dev)
#==============================================================================
# OEM object
#==============================================================================
idxDev <- lapply(idcs, index.q)
names(idxDev) <- "index.q"
stkDev <- FLQuants(catch.n=catch.dev)
dev <- list(idx=idxDev, stk=stkDev)
obs <- list(idx=idcs[1], stk=stk)
oem <- FLoem(method=sampling.oem, observations=obs, deviances=dev)
#save(oem, file="oem.RData")
###############################################################################
# Implementation error
###############################################################################
iem <- FLiem(method=noise.iem, args=list(fun="rlnorm", mean=0, sd=0, multiplicative=TRUE))
###############################################################################
# Management procedure
###############################################################################
# general pars, add seed
mpargs$seed <- 1234
oem
obj1 <- stk.om[,,,,,1]
obj1 <- stock(om)[,,,,,1]
obj2 <- stock(om)[,,,,,2]
obj3 <- combine(obj1, obj2)
all.equal(obj3, stock(om))
lapply(list(...), '[[', 'tracking')
obj1 <- getIters(oem, 1)
obj2 <- getIters(oem, 2)
obj1
combine
setMethod("combine", signature(x = "FLoem", y = "FLoem"), function(x, y, ...){
obj <- x
deviances(obj) <- combine(deviances(x), deviances(y))
observations(obj) <- combine(observations(x), observations(y))
obj
})
obj3 <- combine(obj1, obj2)
deviances(oem)
is(deviances(oem))
names(deviances(oem))
is(deviances(oem)[[1]])
is(deviances(oem)[[2]])
setMethod("combine", signature(x = "FLoem", y = "FLoem"), function(x, y, ...){
obj <- x
dev <- deviances(obj)
obs <- observations(obj)
for(i in 1:length(dev)) dev[[i]] <- combine(deviances(x)[[i]], deviances(y)[[i]])
for(i in 1:length(obs)) obs [[i]] <- combine(observations(x)[[i]], observations(y)[[i]])
dev -> deviances(obj)
obs -> observations(obj)
obj
})
combine(obj1, obj2)
is(observations(oem)[[1]])
is(observations(oem)[[2]])
setMethod("combine", signature(x = "FLoem", y = "FLoem"), function(x, y, ...){
obj <- x
dev <- deviances(obj)
obs <- observations(obj)
for(i in 1:length(dev)) dev[[i]] <- combine(deviances(x)[[i]], deviances(y)[[i]])
#for(i in 1:length(obs)) obs [[i]] <- combine(observations(x)[[i]], observations(y)[[i]])
dev -> deviances(obj)
#obs -> observations(obj)
obj
})
bj3 <- combine(obj1, obj2)
obj3 <- combine(obj1, obj2)
all.equal(deviances(oem), deviances(obj3))
setMethod("combine", signature(x = "FLoem", y = "FLoem"), function(x, y, ...){
obj <- x
dev <- deviances(obj)
obs <- observations(obj)
for(i in 1:length(dev)) dev[[i]] <- combine(deviances(x)[i], deviances(y)[i])
#for(i in 1:length(obs)) obs [[i]] <- combine(observations(x)[[i]], observations(y)[[i]])
dev -> deviances(obj)
#obs -> observations(obj)
obj
})
obj3 <- combine(obj1, obj2)
deviances(obj3)
names(deviances(obj3))
names(deviances(oem))
names(deviances(obj3)[[1]])
names(deviances(oem)[[1]])
q()
source("example.R", echo=TRUE)
stopCluster(cl)
stopCluster(cl)
cl <- makeCluster(1)
clusterEvalQ(cl = cl, expr = {library(mse);library(FLa4a)})
registerDoParallel(cl)
ctrl <- mpCtrl(list(ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3))))
# run new method in single core without foreach
mpargs$nblocks <- 1
resp1 <- mpParallel(om, oem, ctrl.mp=ctrl, genArgs=mpargs)
all.equal(stock(res1), stock(resp1))
mpargs$nblocks <- 2
resp1a <- mpParallel(om, oem, ctrl.mp=ctrl, genArgs=mpargs)
all.equal(stock(res1), stock(resp1a))
stopCluster(cl)
cl <- makeCluster(2)
clusterEvalQ(cl = cl, expr = {library(mse);library(FLa4a)})
registerDoParallel(cl)
resp1b <- mpParallel(om, oem, ctrl.mp=ctrl, genArgs=mpargs)
all.equal(stock(res1), stock(resp1b))
stopCluster(cl)
stopCluster(cl)
cl <- makeCluster(1)
clusterEvalQ(cl = cl, expr = {library(mse);library(FLa4a)})
registerDoParallel(cl)
ctrl <- mpCtrl(list(
ctrl.hcr = mseCtrl(method=fixedF.hcr, args=list(ftrg=0.3)),
ctrl.is = mseCtrl(method=tac.is)))
mpargs$nblocks <- 1
resp2 <- mpParallel(om, oem, ctrl.mp=ctrl, genArgs=mpargs)
all.equal(stock(res2), stock(resp2))
mpargs$nblocks <- 2
resp2a <- mpParallel(om, oem, ctrl.mp=ctrl, genArgs=mpargs)
tac.is
library(devtools)
load_all("../../mse")
stopCluster(cl)
cl <- makeCluster(1)
clusterEvalQ(cl = cl, expr = {library(mse);library(FLa4a)})
registerDoParallel(cl)
mpargs$nblocks <- 2
resp2a <- mpParallel(om, oem, ctrl.mp=ctrl, genArgs=mpargs)
q()
